// Generated by gencpp from file arm_msgs/ManipulatorState.msg
// DO NOT EDIT!


#ifndef ARM_MSGS_MESSAGE_MANIPULATORSTATE_H
#define ARM_MSGS_MESSAGE_MANIPULATORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace arm_msgs
{
template <class ContainerAllocator>
struct ManipulatorState_
{
  typedef ManipulatorState_<ContainerAllocator> Type;

  ManipulatorState_()
    : header()
    , q_target()
    , qd_target()
    , i_target()
    , m_target()
    , tau_target()
    , tool_vector_target()
    , q_actual()
    , qd_actual()
    , i_actual()
    , tau_actual()
    , tcp_force()
    , tool_vector_actual()
    , motor_temperatures()
    , joint_modes()
    , controller_timer(0.0)
    , qdd_target()
    , tool_acc_values()
    , robot_mode(0.0)
    , test_value(0.0)
    , m_actual()
    , digital_input_bits()
    , tcp_speed_target()
    , tcp_speed_actual()  {
    }
  ManipulatorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , q_target(_alloc)
    , qd_target(_alloc)
    , i_target(_alloc)
    , m_target(_alloc)
    , tau_target(_alloc)
    , tool_vector_target(_alloc)
    , q_actual(_alloc)
    , qd_actual(_alloc)
    , i_actual(_alloc)
    , tau_actual(_alloc)
    , tcp_force(_alloc)
    , tool_vector_actual(_alloc)
    , motor_temperatures(_alloc)
    , joint_modes(_alloc)
    , controller_timer(0.0)
    , qdd_target(_alloc)
    , tool_acc_values(_alloc)
    , robot_mode(0.0)
    , test_value(0.0)
    , m_actual(_alloc)
    , digital_input_bits(_alloc)
    , tcp_speed_target(_alloc)
    , tcp_speed_actual(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_target_type;
  _q_target_type q_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qd_target_type;
  _qd_target_type qd_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _i_target_type;
  _i_target_type i_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _m_target_type;
  _m_target_type m_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tau_target_type;
  _tau_target_type tau_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tool_vector_target_type;
  _tool_vector_target_type tool_vector_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _q_actual_type;
  _q_actual_type q_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qd_actual_type;
  _qd_actual_type qd_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _i_actual_type;
  _i_actual_type i_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tau_actual_type;
  _tau_actual_type tau_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tcp_force_type;
  _tcp_force_type tcp_force;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tool_vector_actual_type;
  _tool_vector_actual_type tool_vector_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _motor_temperatures_type;
  _motor_temperatures_type motor_temperatures;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_modes_type;
  _joint_modes_type joint_modes;

   typedef double _controller_timer_type;
  _controller_timer_type controller_timer;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _qdd_target_type;
  _qdd_target_type qdd_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tool_acc_values_type;
  _tool_acc_values_type tool_acc_values;

   typedef double _robot_mode_type;
  _robot_mode_type robot_mode;

   typedef double _test_value_type;
  _test_value_type test_value;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _m_actual_type;
  _m_actual_type m_actual;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _digital_input_bits_type;
  _digital_input_bits_type digital_input_bits;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tcp_speed_target_type;
  _tcp_speed_target_type tcp_speed_target;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _tcp_speed_actual_type;
  _tcp_speed_actual_type tcp_speed_actual;





  typedef boost::shared_ptr< ::arm_msgs::ManipulatorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::ManipulatorState_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulatorState_

typedef ::arm_msgs::ManipulatorState_<std::allocator<void> > ManipulatorState;

typedef boost::shared_ptr< ::arm_msgs::ManipulatorState > ManipulatorStatePtr;
typedef boost::shared_ptr< ::arm_msgs::ManipulatorState const> ManipulatorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_msgs::ManipulatorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_msgs::ManipulatorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_msgs::ManipulatorState_<ContainerAllocator1> & lhs, const ::arm_msgs::ManipulatorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.q_target == rhs.q_target &&
    lhs.qd_target == rhs.qd_target &&
    lhs.i_target == rhs.i_target &&
    lhs.m_target == rhs.m_target &&
    lhs.tau_target == rhs.tau_target &&
    lhs.tool_vector_target == rhs.tool_vector_target &&
    lhs.q_actual == rhs.q_actual &&
    lhs.qd_actual == rhs.qd_actual &&
    lhs.i_actual == rhs.i_actual &&
    lhs.tau_actual == rhs.tau_actual &&
    lhs.tcp_force == rhs.tcp_force &&
    lhs.tool_vector_actual == rhs.tool_vector_actual &&
    lhs.motor_temperatures == rhs.motor_temperatures &&
    lhs.joint_modes == rhs.joint_modes &&
    lhs.controller_timer == rhs.controller_timer &&
    lhs.qdd_target == rhs.qdd_target &&
    lhs.tool_acc_values == rhs.tool_acc_values &&
    lhs.robot_mode == rhs.robot_mode &&
    lhs.test_value == rhs.test_value &&
    lhs.m_actual == rhs.m_actual &&
    lhs.digital_input_bits == rhs.digital_input_bits &&
    lhs.tcp_speed_target == rhs.tcp_speed_target &&
    lhs.tcp_speed_actual == rhs.tcp_speed_actual;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_msgs::ManipulatorState_<ContainerAllocator1> & lhs, const ::arm_msgs::ManipulatorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_msgs::ManipulatorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_msgs::ManipulatorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_msgs::ManipulatorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30e728ca616a11ea04e008e82f09e713";
  }

  static const char* value(const ::arm_msgs::ManipulatorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30e728ca616a11eaULL;
  static const uint64_t static_value2 = 0x04e008e82f09e713ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_msgs/ManipulatorState";
  }

  static const char* value(const ::arm_msgs::ManipulatorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[] q_target # an array of floating-point numbers representing the target joint positions\n"
"float64[] qd_target # an array of floating-point numbers representing the target joint velocities\n"
"float64[] i_target # an array of floating-point numbers representing the target joint currents\n"
"float64[] m_target # an array of floating-point numbers representing the target joint moments\n"
"float64[] tau_target # an array of floating-point numbers representing the target joint torques\n"
"float64[] tool_vector_target # an array of floating-point numbers representing the tool vector\n"
"float64[] q_actual # an array of floating-point numbers representing the actual joint positions\n"
"float64[] qd_actual # an array of floating-point numbers representing the actual joint velocities\n"
"float64[] i_actual # an array of floating-point numbers representing the actual joint currents\n"
"float64[] tau_actual # an array of floating-point numbers representing the actual joint torques\n"
"float64[] tcp_force # an array of floating-point numbers representing the force applied to the tool center point (TCP)\n"
"float64[] tool_vector_actual # an array of floating-point numbers representing the tool vector\n"
"float64[] motor_temperatures # an array of floating-point numbers representing the temperatures of the motors\n"
"float64[] joint_modes # an array of floating-point numbers representing the modes of the joints\n"
"float64 controller_timer # a floating-point number representing the controller timer\n"
"float64[] qdd_target # an array of floating-point numbers representing the target joint accelerations\n"
"# float64[] qdd_actual # an array of floating-point numbers representing the actual joint accelerations\n"
"float64[] tool_acc_values # an array of floating-point numbers representing the tool acceleration values\n"
"float64 robot_mode # a floating-point number representing the current robot mode\n"
"float64 test_value # a floating-point number representing a test value\n"
"\n"
"# edit\n"
"float64[] m_actual  # an array of floating-point numbers representing the actual joint moments\n"
"float64[] digital_input_bits # a floating-point number representing the state of the digital input bits\n"
"float64[] tcp_speed_target # an array of floating-point numbers representing the target speed of the TCP\n"
"float64[] tcp_speed_actual # an array of floating-point numbers representing the actual speed of the TCP\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::arm_msgs::ManipulatorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.q_target);
      stream.next(m.qd_target);
      stream.next(m.i_target);
      stream.next(m.m_target);
      stream.next(m.tau_target);
      stream.next(m.tool_vector_target);
      stream.next(m.q_actual);
      stream.next(m.qd_actual);
      stream.next(m.i_actual);
      stream.next(m.tau_actual);
      stream.next(m.tcp_force);
      stream.next(m.tool_vector_actual);
      stream.next(m.motor_temperatures);
      stream.next(m.joint_modes);
      stream.next(m.controller_timer);
      stream.next(m.qdd_target);
      stream.next(m.tool_acc_values);
      stream.next(m.robot_mode);
      stream.next(m.test_value);
      stream.next(m.m_actual);
      stream.next(m.digital_input_bits);
      stream.next(m.tcp_speed_target);
      stream.next(m.tcp_speed_actual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulatorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::ManipulatorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_msgs::ManipulatorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "q_target[]" << std::endl;
    for (size_t i = 0; i < v.q_target.size(); ++i)
    {
      s << indent << "  q_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_target[i]);
    }
    s << indent << "qd_target[]" << std::endl;
    for (size_t i = 0; i < v.qd_target.size(); ++i)
    {
      s << indent << "  qd_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd_target[i]);
    }
    s << indent << "i_target[]" << std::endl;
    for (size_t i = 0; i < v.i_target.size(); ++i)
    {
      s << indent << "  i_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.i_target[i]);
    }
    s << indent << "m_target[]" << std::endl;
    for (size_t i = 0; i < v.m_target.size(); ++i)
    {
      s << indent << "  m_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.m_target[i]);
    }
    s << indent << "tau_target[]" << std::endl;
    for (size_t i = 0; i < v.tau_target.size(); ++i)
    {
      s << indent << "  tau_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_target[i]);
    }
    s << indent << "tool_vector_target[]" << std::endl;
    for (size_t i = 0; i < v.tool_vector_target.size(); ++i)
    {
      s << indent << "  tool_vector_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_vector_target[i]);
    }
    s << indent << "q_actual[]" << std::endl;
    for (size_t i = 0; i < v.q_actual.size(); ++i)
    {
      s << indent << "  q_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_actual[i]);
    }
    s << indent << "qd_actual[]" << std::endl;
    for (size_t i = 0; i < v.qd_actual.size(); ++i)
    {
      s << indent << "  qd_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd_actual[i]);
    }
    s << indent << "i_actual[]" << std::endl;
    for (size_t i = 0; i < v.i_actual.size(); ++i)
    {
      s << indent << "  i_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.i_actual[i]);
    }
    s << indent << "tau_actual[]" << std::endl;
    for (size_t i = 0; i < v.tau_actual.size(); ++i)
    {
      s << indent << "  tau_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_actual[i]);
    }
    s << indent << "tcp_force[]" << std::endl;
    for (size_t i = 0; i < v.tcp_force.size(); ++i)
    {
      s << indent << "  tcp_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tcp_force[i]);
    }
    s << indent << "tool_vector_actual[]" << std::endl;
    for (size_t i = 0; i < v.tool_vector_actual.size(); ++i)
    {
      s << indent << "  tool_vector_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_vector_actual[i]);
    }
    s << indent << "motor_temperatures[]" << std::endl;
    for (size_t i = 0; i < v.motor_temperatures.size(); ++i)
    {
      s << indent << "  motor_temperatures[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_temperatures[i]);
    }
    s << indent << "joint_modes[]" << std::endl;
    for (size_t i = 0; i < v.joint_modes.size(); ++i)
    {
      s << indent << "  joint_modes[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_modes[i]);
    }
    s << indent << "controller_timer: ";
    Printer<double>::stream(s, indent + "  ", v.controller_timer);
    s << indent << "qdd_target[]" << std::endl;
    for (size_t i = 0; i < v.qdd_target.size(); ++i)
    {
      s << indent << "  qdd_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qdd_target[i]);
    }
    s << indent << "tool_acc_values[]" << std::endl;
    for (size_t i = 0; i < v.tool_acc_values.size(); ++i)
    {
      s << indent << "  tool_acc_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_acc_values[i]);
    }
    s << indent << "robot_mode: ";
    Printer<double>::stream(s, indent + "  ", v.robot_mode);
    s << indent << "test_value: ";
    Printer<double>::stream(s, indent + "  ", v.test_value);
    s << indent << "m_actual[]" << std::endl;
    for (size_t i = 0; i < v.m_actual.size(); ++i)
    {
      s << indent << "  m_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.m_actual[i]);
    }
    s << indent << "digital_input_bits[]" << std::endl;
    for (size_t i = 0; i < v.digital_input_bits.size(); ++i)
    {
      s << indent << "  digital_input_bits[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.digital_input_bits[i]);
    }
    s << indent << "tcp_speed_target[]" << std::endl;
    for (size_t i = 0; i < v.tcp_speed_target.size(); ++i)
    {
      s << indent << "  tcp_speed_target[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tcp_speed_target[i]);
    }
    s << indent << "tcp_speed_actual[]" << std::endl;
    for (size_t i = 0; i < v.tcp_speed_actual.size(); ++i)
    {
      s << indent << "  tcp_speed_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tcp_speed_actual[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_MANIPULATORSTATE_H
