// Generated by gencpp from file arm_msgs/GripperState.msg
// DO NOT EDIT!


#ifndef ARM_MSGS_MESSAGE_GRIPPERSTATE_H
#define ARM_MSGS_MESSAGE_GRIPPERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace arm_msgs
{
template <class ContainerAllocator>
struct GripperState_
{
  typedef GripperState_<ContainerAllocator> Type;

  GripperState_()
    : header()
    , coeff_p()
    , gripper_cmd()
    , gripper_status()
    , ee_ft()
    , gripper_joints()
    , gripper_torque(0.0)
    , coeff_d()
    , gripper_speed()  {
    }
  GripperState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , coeff_p(_alloc)
    , gripper_cmd(_alloc)
    , gripper_status(_alloc)
    , ee_ft(_alloc)
    , gripper_joints(_alloc)
    , gripper_torque(0.0)
    , coeff_d(_alloc)
    , gripper_speed(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _coeff_p_type;
  _coeff_p_type coeff_p;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _gripper_cmd_type;
  _gripper_cmd_type gripper_cmd;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _gripper_status_type;
  _gripper_status_type gripper_status;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _ee_ft_type;
  _ee_ft_type ee_ft;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gripper_joints_type;
  _gripper_joints_type gripper_joints;

   typedef double _gripper_torque_type;
  _gripper_torque_type gripper_torque;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _coeff_d_type;
  _coeff_d_type coeff_d;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gripper_speed_type;
  _gripper_speed_type gripper_speed;





  typedef boost::shared_ptr< ::arm_msgs::GripperState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_msgs::GripperState_<ContainerAllocator> const> ConstPtr;

}; // struct GripperState_

typedef ::arm_msgs::GripperState_<std::allocator<void> > GripperState;

typedef boost::shared_ptr< ::arm_msgs::GripperState > GripperStatePtr;
typedef boost::shared_ptr< ::arm_msgs::GripperState const> GripperStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_msgs::GripperState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_msgs::GripperState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_msgs::GripperState_<ContainerAllocator1> & lhs, const ::arm_msgs::GripperState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.coeff_p == rhs.coeff_p &&
    lhs.gripper_cmd == rhs.gripper_cmd &&
    lhs.gripper_status == rhs.gripper_status &&
    lhs.ee_ft == rhs.ee_ft &&
    lhs.gripper_joints == rhs.gripper_joints &&
    lhs.gripper_torque == rhs.gripper_torque &&
    lhs.coeff_d == rhs.coeff_d &&
    lhs.gripper_speed == rhs.gripper_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_msgs::GripperState_<ContainerAllocator1> & lhs, const ::arm_msgs::GripperState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arm_msgs::GripperState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_msgs::GripperState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_msgs::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_msgs::GripperState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_msgs::GripperState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_msgs::GripperState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11c92e29e7ae9eb5b85345e361142462";
  }

  static const char* value(const ::arm_msgs::GripperState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11c92e29e7ae9eb5ULL;
  static const uint64_t static_value2 = 0xb85345e361142462ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_msgs/GripperState";
  }

  static const char* value(const ::arm_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_msgs::GripperState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[] coeff_p # a floating-point number representing a proporsional coefficient for feedback loop\n"
"uint8[] gripper_cmd # sequence of bits which representing the command to the gripper\n"
"uint8[] gripper_status # sequence of bits which representing the status of the gripper\n"
"float32[] ee_ft # 3 forces and 3 torques on the end-effector with additinal sensor\n"
"float64[] gripper_joints # a floating-point number representing an angle of gripper\n"
"float64 gripper_torque # a floating-point number representing a torque value on gripper joint\n"
"float64[] coeff_d # a floating-point number representing a differential coefficient for feedback loop\n"
"float64[] gripper_speed # a floating-point number representing velocity of the gripper joints.\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::arm_msgs::GripperState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_msgs::GripperState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.coeff_p);
      stream.next(m.gripper_cmd);
      stream.next(m.gripper_status);
      stream.next(m.ee_ft);
      stream.next(m.gripper_joints);
      stream.next(m.gripper_torque);
      stream.next(m.coeff_d);
      stream.next(m.gripper_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_msgs::GripperState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_msgs::GripperState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "coeff_p[]" << std::endl;
    for (size_t i = 0; i < v.coeff_p.size(); ++i)
    {
      s << indent << "  coeff_p[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coeff_p[i]);
    }
    s << indent << "gripper_cmd[]" << std::endl;
    for (size_t i = 0; i < v.gripper_cmd.size(); ++i)
    {
      s << indent << "  gripper_cmd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gripper_cmd[i]);
    }
    s << indent << "gripper_status[]" << std::endl;
    for (size_t i = 0; i < v.gripper_status.size(); ++i)
    {
      s << indent << "  gripper_status[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gripper_status[i]);
    }
    s << indent << "ee_ft[]" << std::endl;
    for (size_t i = 0; i < v.ee_ft.size(); ++i)
    {
      s << indent << "  ee_ft[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ee_ft[i]);
    }
    s << indent << "gripper_joints[]" << std::endl;
    for (size_t i = 0; i < v.gripper_joints.size(); ++i)
    {
      s << indent << "  gripper_joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gripper_joints[i]);
    }
    s << indent << "gripper_torque: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_torque);
    s << indent << "coeff_d[]" << std::endl;
    for (size_t i = 0; i < v.coeff_d.size(); ++i)
    {
      s << indent << "  coeff_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coeff_d[i]);
    }
    s << indent << "gripper_speed[]" << std::endl;
    for (size_t i = 0; i < v.gripper_speed.size(); ++i)
    {
      s << indent << "  gripper_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gripper_speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MSGS_MESSAGE_GRIPPERSTATE_H
